name: CI/CD for Node.js App with Docker

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Chọn phiên bản Node.js phù hợp

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint # Giả sử bạn đã có lệnh 'lint' trong package.json

      - name: Inject environment variables
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/x-factor-be:${{ github.sha }} .

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/x-factor-be:${{ github.sha }}

  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Install SonarScanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner.zip -d $HOME/
          echo "$HOME/sonar-scanner-4.6.2.2472-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
          -Dsonar.projectKey=QuangDoo_X-Apis \
          -Dsonar.sources=. \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Docker login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull Docker image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/x-factor-be:${{ github.sha }}

      - name: Deploy to production
        env:
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} \
          "docker login -u '${{ secrets.DOCKER_USERNAME }}' -p '${{ secrets.DOCKER_PASSWORD }}' && \
          docker pull ${{ secrets.DOCKER_USERNAME }}/x-factor-be:${{ github.sha }} && \
          docker stop x-factor-be || true && \
          docker rm x-factor-be || true && \
          docker run -d --name x-factor-be -p 8080:4000 ${{ secrets.DOCKER_USERNAME }}/x-factor-be:${{ github.sha }}"
